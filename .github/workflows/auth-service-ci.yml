name: Auth Service CI/CD

on:
  push:
    branches: [develop, staging, main, feature/*]
    paths: 
      - 'services/auth-service/**'
      - '.github/workflows/auth-service-ci.yml'
  pull_request:
    branches: [develop, staging, main]
    paths: 
      - 'services/auth-service/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: nmbuild/fintrax-auth-service

jobs:
  # Security & Quality Checks
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'services/auth-service/package-lock.json'

      - name: Install dependencies
        working-directory: services/auth-service
        run: npm ci

      - name: Run ESLint (SAST)
        working-directory: services/auth-service
        run: npm run lint || echo "Lint script not found, skipping..."

      - name: Run TypeScript type checking
        working-directory: services/auth-service
        run: npx tsc --noEmit

      - name: Build application
        working-directory: services/auth-service
        run: npm run build

      - name: Run tests with coverage
        working-directory: services/auth-service
        run: npm test -- --coverage --watchAll=false
        env:
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: auth-service-test-results
          path: |
            services/auth-service/coverage/
            services/auth-service/dist/

      # Supply Chain Security
      - name: Run npm audit
        working-directory: services/auth-service
        run: npm audit --audit-level moderate || echo "Audit issues found, review required"

      # Dependency vulnerability scan
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=services/auth-service/package.json --severity-threshold=high

      # SBOM Generation
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: services/auth-service
          format: spdx-json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-auth-service
          path: sbom.spdx.json

  # Container Build & Scan
  build-and-scan:
    name: Build & Scan Container
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.build.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-,enable={{is_default_branch}}
            type=sha,prefix=pr-{{branch}}-,enable=${{ github.event_name == 'pull_request' }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: services/auth-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Verify the image was pushed successfully
      - name: Verify image exists
        run: |
          echo "Image digest: ${{ steps.build.outputs.digest }}"
          echo "Image tags: ${{ steps.meta.outputs.tags }}"
          # Pull the image to verify it exists
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

      # Container Security Scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'table'
          output: 'trivy-results.txt'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results-auth-service
          path: 'trivy-results.txt'

            # Image Signing with Cosign
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Check network connectivity
        run: |
          echo "🌐 Testing network connectivity..."
          curl -I https://ghcr.io/v2/ || echo "Direct GHCR access failed"
          curl -I https://oauth2.sigstore.dev/ || echo "Sigstore OAuth access failed"
          nslookup ghcr.io || echo "DNS resolution for GHCR failed"
          echo "Network check completed"

      - name: Debug build outputs
        run: |
          echo "Build digest: ${{ steps.build.outputs.digest }}"
          echo "Image reference: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
          echo "Testing connectivity to GHCR..."
          curl -I https://ghcr.io/v2/ || echo "GHCR connectivity test failed"

      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          # Login with retry logic
          for i in {1..3}; do
            echo "${{ secrets.GH_GITHUB_TOKEN }}" | cosign login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin && break || {
              echo "Login attempt $i failed, retrying in 10 seconds..."
              sleep 10
            }
          done
          
          # Sign with retry logic and increased timeout
          for i in {1..3}; do
            timeout 300 cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }} && break || {
              echo "Signing attempt $i failed, retrying in 15 seconds..."
              sleep 15
            }
          done

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-scan
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: fintrax_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'services/auth-service/package-lock.json'

      - name: Install dependencies
        working-directory: services/auth-service
        run: npm ci

      - name: Run integration tests
        working-directory: services/auth-service
        run: npm run test:integration || echo "Integration tests not found, skipping..."
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/fintrax_test
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY_TEST }}

  # Deploy to Development
  # Deploy to Development (PR to develop)
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-scan, integration-tests]
    if: github.event_name == 'pull_request' && github.base_ref == 'develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name fintrax-eks-dev

      - name: Create GHCR secret
        run: |
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GH_GITHUB_TOKEN }} \
            --namespace fintrax-dev \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to dev using Helm
        run: |
          helm upgrade --install auth-service ./infra/charts/auth-service \
            --namespace fintrax-dev \
            --create-namespace \
            --values ./infra/charts/auth-service/values-dev.yaml \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=feature-auth \
            --wait --timeout=300s

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/auth-service -n fintrax-dev --timeout=300s
          kubectl get pods -n fintrax-dev -l app=auth-service

  # Deploy to Development (merged to develop)  
  deploy-dev-merge:
    name: Deploy to Development (Merge)
    runs-on: ubuntu-latest
    needs: [build-and-scan, integration-tests]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name fintrax-eks-dev

      - name: Create GHCR secret
        run: |
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GH_GITHUB_TOKEN }} \
            --namespace fintrax-dev \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to dev using Helm
        run: |
          helm upgrade --install auth-service ./infra/charts/auth-service \
            --namespace fintrax-dev \
            --create-namespace \
            --values ./infra/charts/auth-service/values-dev.yaml \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=develop \
            --wait --timeout=300s

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/auth-service -n fintrax-dev --timeout=300s
          kubectl get pods -n fintrax-dev -l app=auth-service

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-scan]  # Remove deploy-dev dependency
    if: github.ref == 'refs/heads/staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name fintrax-eks-dev

      - name: Deploy to staging using Helm
        run: |
          helm upgrade --install auth-service ./infra/charts/auth-service \
            --namespace fintrax-staging \
            --create-namespace \
            --values ./infra/charts/auth-service/values-staging.yaml \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.ref_name }}-${{ github.sha }} \
            --wait --timeout=300s

      - name: Verify staging deployment
        run: |
          kubectl rollout status deployment/auth-service -n fintrax-staging --timeout=300s
          kubectl get pods -n fintrax-staging -l app=auth-service

  # Deploy to Production (Manual Approval Required)
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-scan]  # Remove dependency on staging for manual deployment
    if: github.ref == 'refs/heads/main'
    environment: production  # This requires manual approval in GitHub
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name fintrax-eks-dev

      - name: Deploy to production using Helm
        run: |
          helm upgrade --install auth-service ./infra/charts/auth-service \
            --namespace fintrax-prod \
            --create-namespace \
            --values ./infra/charts/auth-service/values-prod.yaml \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.ref_name }}-${{ github.sha }} \
            --wait --timeout=300s

      - name: Post-deployment verification
        run: |
          kubectl rollout status deployment/auth-service -n fintrax-prod --timeout=300s
          kubectl get pods -n fintrax-prod -l app=auth-service

      # Production smoke tests
      - name: Run production smoke tests
        run: |
          # Wait for pods to be ready
          kubectl wait --for=condition=ready pod -l app=auth-service -n fintrax-prod --timeout=300s
          
          # Port forward and run smoke tests
          kubectl port-forward svc/auth-service 8080:3000 -n fintrax-prod &
          sleep 15
          
          # Basic smoke tests
          echo "Running production smoke tests..."
          curl -f http://localhost:8080/health || exit 1
          echo "✅ Health check passed"
          
          # Test authentication endpoint (if available)
          curl -f http://localhost:8080/api/auth/status || echo "⚠️  Auth status endpoint not available"
          
          echo "🚀 Production deployment verification completed"